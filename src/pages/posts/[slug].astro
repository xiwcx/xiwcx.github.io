---
import dayjs from "dayjs";
import Layout from "../../layouts/Default.astro";
import { getCollection, render } from "astro:content";
import {
  defaultImageSizes,
  getCloudinaryResource,
} from "../../utils/cloudinary";
import CloudinaryImage from "../../components/CloudinaryImage.astro";

export async function getStaticPaths() {
  const posts = await getCollection("posts");

  return posts.map((post) => ({
    params: { slug: post.data.slug },
    props: { post },
  }));
}

const { post } = Astro.props;
const herodId = post.data.hero_cloudinary_id;
const hero = herodId ? await getCloudinaryResource(herodId) : undefined;
const { Content } = await render(post);
const formattedDate = dayjs(post.data.date).format("MMMM D, YYYY");
---

<Layout>
  <header>
    <h1>{post.data.title}</h1>

    {
      hero && (
        <CloudinaryImage
          cloudinaryResource={hero}
          imageProps={{ fetchpriority: "high" }}
          sizes={defaultImageSizes}
        />
      )
    }

    <p class="date">{formattedDate}</p>
  </header>

  <article class="font-body">
    <Content />
  </article>
</Layout>

<style>
  .date {
    font-size: 0.75em;
    font-variation-settings: "wght" 200;
  }

  article {
    --border-radius: 0.25em;

    margin-trim: block;
    padding-block-end: 2lh;

    h1,
    h2,
    h3,
    h4,
    h5,
    h6 {
      font-family: var(--font-family-default);
      font-variation-settings: "wght" 500;
    }

    p:has(+ h1),
    p:has(+ h2),
    p:has(+ h3),
    p:has(+ h4),
    p:has(+ h5),
    p:has(+ h6) {
      margin-block-end: 2lh;
    }

    code {
      font-family: "Menlo", "Consolas", "DejaVu Sans Mono", monospace;
      font-size: 0.8em;
    }

    a {
      color: var(--color-text-highlight);
      opacity: 0.9;
    }

    p {
      margin-block: 1lh;

      code {
        background: var(--color-lowlight);
        border-radius: var(--border-radius);
        padding: 0.125em 0.25em;
      }
    }

    .astro-code {
      --x-padding: 1em;
      --y-padding: 0.5em;
      --padding-inline-start: calc(var(--x-padding) / 2);
      --line-number-width: 2.5ch;
      --meta-background: oklch(100% 0 0 / 5%);

      border-radius: var(--border-radius);
      counter-reset: codeblock-line;
      padding-block-end: var(--y-padding);
      padding-block-start: var(--y-padding);
      padding-inline-end: var(--x-padding);
      padding-inline-start: var(--padding-inline-start);
      position: relative;

      &::before {
        background-color: var(--meta-background);
        border-start-start-radius: var(--border-radius);
        bottom: 0;
        content: attr(data-language);
        display: block;
        font-size: 0.8em;
        padding: 0.25em 0.5em;
        position: absolute;
        opacity: 0.75;
        right: 0;
      }

      &::after {
        background-color: var(--meta-background);
        position: absolute;
        top: 0;
        left: 0;
        bottom: 0;
        width: calc(var(--line-number-width) + var(--padding-inline-start));
        content: "";
      }

      .line {
        counter-increment: codeblock-line;

        &::before {
          content: counter(codeblock-line);
          display: inline-block;
          text-align: right;
          margin-inline-end: 1em;
          opacity: 0.5;
          width: 2.5ch;
        }
      }
    }
  }
</style>
